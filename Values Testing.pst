<?xml version="1.0"?><st-source><!-- Name: Values TestingNotice: Comment: Values are simple immutable literal objects.Tests for Values.Includes conformance tests for all leaf classes of Value.DevelopmentPrerequisites: #(#(#any 'SUnitToo' ''))PackageName: Values TestingPadded: trueParcel: #('Values Testing')PrerequisiteDescriptions: #(#(#name 'SUnitToo' #componentType #package))PrerequisiteParcels: #(#('SUnitToo' ''))Version: 3.0.4.0Date: 1:58:32 PM October 19, 2024 --><time-stamp>From VisualWorksÂ®, 9.4 of 5. Januar 2024 on 19. Oktober 2024 at 13:58:32</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>ValuePrinterTest</name><environment>Smalltalk</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Values Testing</package></attributes></class><comment><class-id>ValuePrinterTest</class-id><body>Tests for the source strings of Values</body></comment><class><name>ValuemapTest</name><environment>Smalltalk</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Values Testing</package></attributes></class><comment><class-id>ValuemapTest</class-id><body>Tests for the behavior of OrderedDictionary as Dictionary and as Value</body></comment><class><name>ValueTest</name><environment>Smalltalk</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Values Testing</package></attributes></class><class><name>Testvalue</name><environment>Smalltalk</environment><super>Value</super><private>false</private><indexed-type>none</indexed-type><inst-vars>constant optional array dictionary </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Values Testing</package></attributes></class><comment><class-id>Testvalue</class-id><body>Testvalue is a resource class for testing values</body></comment><class><name>ColorValueTest</name><environment>Smalltalk</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>black white </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Values Testing</package></attributes></class><methods><class-id>Testvalue class</class-id> <category>specification</category><body package="Values Testing">localSpecification	&lt;constant: #constant class: #{Symbol}&gt;	&lt;optional: #optional class: #{Symbol} default: '#none'&gt;	&lt;sequence: #array&gt;	&lt;map: #dictionary&gt;</body></methods><methods><class-id>ValuePrinterTest</class-id> <category>Testing</category><body package="Values Testing">testArray	self assert: Array new asSource equals: '#()'.	self assert: #(1 2 3 4) asSource equals: '#(1 2 3 4)'.	self assert: #(1 2 3 4 5 6 7 8 9 10) asSource equals: '#(1 2 3 4 5 6 7 8 9 10)'.	self		assert: (Array			with: 1			with: 2			with: 3			with: 4) asSource		equals: '#(1 2 3 4)'.	self		assert: (Array			with: 1			with: (Date d: 7 m: 7 y: 2007)			with: ColorValue red) asSource		equals: '(Array	with: 1	with: (Date d: 7 m: 7 y: 2007)	with: ColorValue red)'.	self		assert: (#(1 2 3 4) , (Array with: (Date d: 7 m: 7 y: 2007))) asSource		equals: '((OrderedCollection new: 5)	add: 1;	add: 2;	add: 3;	add: 4;	add: (Date d: 7 m: 7 y: 2007);	yourself)'.	self		assert: (Array			with: Testvalue example			with: (Date d: 7 m: 7 y: 2007)			with: ColorValue red) asSource		equals: '(Array	with: (Testvalue		constant: #constantSymbol		optional: #optionalSymbol		array: #(1 #a $x ''name'')		dictionary: (Valuemap			with: 1 -&gt; #symbol			with: #key -&gt; ''string''))	with: (Date d: 7 m: 7 y: 2007)	with: ColorValue red)'</body><body package="Values Testing">testArraySource	self		assert: (Testvalue			constant: #constantSymbol			optional: #optionalSymbol			array: #(1 #a $x 'name')			dictionary: (Valuemap				with: 1 -&gt; #symbol				with: #key -&gt; 'string')) asSource		equals: '(Testvalue	constant: #constantSymbol	optional: #optionalSymbol	array: #(1 #a $x ''name'')	dictionary: (Valuemap		with: 1 -&gt; #symbol		with: #key -&gt; ''string''))'</body><body package="Values Testing">testBoolean	self assert: true asSource equals: 'true'.	self assert: false asSource equals: 'false'</body><body package="Values Testing">testColorValue	self assert: ColorValue new isEmpty.	self assert: ColorValue red asSource equals: 'ColorValue red'.	self		assert: (ColorValue fromBytesRed: 0 green: 255 blue: 255) asSource		equals: 'ColorValue cyan'.	self		assert: (ColorValue fromBytesRed: 10 green: 255 blue: 255) asSource		equals: '(ColorValue fromBytesRed: 10 green: 255 blue: 255)'</body><body package="Values Testing">testDate	self assert: (Date d: 7 m: 7 y: 2007) asSource equals: '(Date d: 7 m: 7 y: 2007)'</body><body package="Values Testing">testDictionary	| dict |	self assert: Valuemap new asSource equals: 'Valuemap new'.	dict := Valuemap		with: 1 -&gt; 75		with: #b -&gt; $x.	self		assert: dict asSource		equals: '(Valuemap	with: 1 -&gt; 75	with: #b -&gt; $x)'</body><body package="Values Testing">testDictionarySource	self		assert: (Testvalue			constant: #constantSymbol			optional: #optionalSymbol			array: #(1 #a $x 'name')			dictionary: (Valuemap				with: 1 -&gt; #symbol				with: #key -&gt; 'string')) asSource		equals: '(Testvalue	constant: #constantSymbol	optional: #optionalSymbol	array: #(1 #a $x ''name'')	dictionary: (Valuemap		with: 1 -&gt; #symbol		with: #key -&gt; ''string''))'.	self assert: (Testvalue constant: #Haider) asSource equals: '(Testvalue constant: #Haider)'</body><body package="Values Testing">testDictionaryWithValues	| dict |	dict := Valuemap		with: 1 -&gt; Testvalue example		with: Testvalue example -&gt; $x.	self		assert: dict asSource		equals: '(Valuemap	with: 1 -&gt; (Testvalue		constant: #constantSymbol		optional: #optionalSymbol		array: #(1 #a $x ''name'')		dictionary: (Valuemap			with: 1 -&gt; #symbol			with: #key -&gt; ''string''))	with: (Testvalue		constant: #constantSymbol		optional: #optionalSymbol		array: #(1 #a $x ''name'')		dictionary: (Valuemap			with: 1 -&gt; #symbol			with: #key -&gt; ''string'')) -&gt; $x)'</body><body package="Values Testing">testDuration	self assert: 5 minutes asSource equals: '(Duration nanoseconds: 300000000000)'</body><body package="Values Testing">testEvaluateLongArray	self		shouldnt: [		(OrderedCollection new: 5)			add: 1;			add: 2;			add: 3;			add: 4;			add: (Date d: 7 m: 7 y: 2007);			yourself]		raise: Error</body><body package="Values Testing">testEvaluateLongDictionary	self		shouldnt: [		(Valuemap new: 6)			add: 1 -&gt; 75;			add: #b -&gt; $x;			add: 42 -&gt; 'Hello';			add: 'abc' -&gt; 32;			add: 2 -&gt; #(#String);			add: true -&gt; #hi;			yourself]		raise: Error</body><body package="Values Testing">testLiteralArrays	self assert: #(1 2 10 20 100) asSource equals: '#(1 2 10 20 100)'</body><body package="Values Testing">testLongDictionary	| dict |	dict := Valuemap new.	dict at: 1 put: 75.	dict at: #b put: $x.	dict at: 42 put: 'Hello'.	dict at: 'abc' put: 32.	dict at: 2 put: #(#String).	dict at: true put: #hi.	self		assert: dict asSource		equals: '((Valuemap new: 6)	add: 1 -&gt; 75;	add: #b -&gt; $x;	add: 42 -&gt; ''Hello'';	add: ''abc'' -&gt; 32;	add: 2 -&gt; #(#String);	add: true -&gt; #hi;	yourself)'</body><body package="Values Testing">testNumbers	self assert: 42 asSource equals: '42'.	self assert: 429999999939333 asSource equals: '429999999939333'.	self assert: 2.5 asSource equals: '2.5'	"only VW, not Gemstone	self assert: 2.5e7 asSource = '2.5e7'.	self assert: 2.5e-7 asSource = '2.5e-7'.	self assert: 2.5d137 asSource = '2.5d137'.	self assert: 2.5d-137 asSource = '2.5d-137'.	self assert: 25s7 asSource = '25.0000000s'.	self assert: (2 / 5) asSource = '(2 / 5)'.	"</body><body package="Values Testing">testOptionalConstantSource	self		assert: (Testvalue			constant: #constantSymbol			optional: #optionalSymbol			array: #(1 #a $x 'name')			dictionary: (Valuemap				with: 1 -&gt; #symbol				with: #key -&gt; 'string')) asSource		equals: '(Testvalue	constant: #constantSymbol	optional: #optionalSymbol	array: #(1 #a $x ''name'')	dictionary: (Valuemap		with: 1 -&gt; #symbol		with: #key -&gt; ''string''))'.	self		assert: (Testvalue			constant: #constantSymbol			optional: #optionalSymbol			array: #(1 #a $x 'name')) asSource		equals: '(Testvalue constant: #constantSymbol optional: #optionalSymbol array: #(1 #a $x ''name''))'.	self		assert: (Testvalue constant: #constantSymbol optional: #optionalSymbol) asSource		equals: '(Testvalue constant: #constantSymbol optional: #optionalSymbol)'.	self		assert: (Testvalue constant: #constantSymbol) asSource		equals: '(Testvalue constant: #constantSymbol)'</body><body package="Values Testing">testPoint	self assert: (1 @ 2) asSource equals: '1 @ 2'.	self assert: (1 @ (Date d: 7 m: 7 y: 2007)) asSource equals: '1 @ (Date d: 7 m: 7 y: 2007)'</body><body package="Values Testing">testTime	self assert: (Time h: 7 m: 27 s: 13) asSource equals: '(Time h: 7 m: 27 s: 13)'.	self assert: (Time h: 7 m: 27 s: 0) asSource equals: '(Time h: 7 m: 27)'.	self assert: (Time h: 7 m: 27) asSource equals: '(Time h: 7 m: 27)'.	self assert: (Time h: 7 m: 0 s: 0) asSource equals: '(Time h: 7)'.	self assert: (Time h: 7 m: 0) asSource equals: '(Time h: 7)'.	self assert: (Time h: 7) asSource equals: '(Time h: 7)'.	self assert: (Time h: 0) asSource equals: 'Time zero'.	self assert: Time zero asSource equals: 'Time zero'</body><body package="Values Testing">testTimestamp	self		assert: (Timestamp d: 15 m: 7 y: 2007 h: 7 m: 27 s: 13) asSource		equals: '(Timestamp d: 15 m: 7 y: 2007 h: 7 m: 27 s: 13)'.	self		assert: (Timestamp d: 15 m: 7 y: 2007 h: 7 m: 27 s: 0) asSource		equals: '(Timestamp d: 15 m: 7 y: 2007 h: 7 m: 27)'.	self		assert: (Timestamp d: 15 m: 7 y: 2007 h: 7 m: 27) asSource		equals: '(Timestamp d: 15 m: 7 y: 2007 h: 7 m: 27)'.	self		assert: (Timestamp d: 15 m: 7 y: 2007 h: 7 m: 0 s: 0) asSource		equals: '(Timestamp d: 15 m: 7 y: 2007 h: 7)'.	self		assert: (Timestamp d: 15 m: 7 y: 2007 h: 7 m: 0) asSource		equals: '(Timestamp d: 15 m: 7 y: 2007 h: 7)'.	self		assert: (Timestamp d: 15 m: 7 y: 2007 h: 7) asSource		equals: '(Timestamp d: 15 m: 7 y: 2007 h: 7)'.	self		assert: (Timestamp d: 15 m: 7 y: 2007 h: 0) asSource		equals: '(Timestamp d: 15 m: 7 y: 2007)'.	self		assert: (Timestamp d: 15 m: 7 y: 2007) asSource		equals: '(Timestamp d: 15 m: 7 y: 2007)'</body></methods><methods><class-id>ValuemapTest</class-id> <category>Testing</category><body package="Values Testing">testAdding	| od od1 |	od := Valuemap new.	self assert: od isEmpty.	od add: #foo -&gt; 'bar'.	self assert: od size = 1.	self assert: (od atIndex: 1) = (#foo -&gt; 'bar').	self assert: (od at: #foo) = 'bar'.	od at: #baz put: 'xxx'.	self assert: od size = 2.	self assert: (od atIndex: 2) = (#baz -&gt; 'xxx').	self assert: (od at: #baz) = 'xxx'.	od1 := Valuemap new.	od1 add: #foo -&gt; 'baz'.	od1 at: #baz put: 'yyy'.	od addAll: od1.	self assert: od size = 2.	self assert: (od at: #foo) = 'baz'.	self assert: (od at: #baz) = 'yyy'.</body><body package="Values Testing">testAddingWithGrowth	"add iteratively elements, so that the dictionary must grow"	| letters od od1 |	letters := #(#a #b #c #d #e #f #g #h #i #j #k #l #m #n #o #p #q #r #s #t #u #v #w #x #y #z).	od := Valuemap new.	self shouldnt: [letters do: [:symbol | od add: symbol -&gt; symbol asString]] raise: Error.	self assert: od keys asArray = #(#a #b #c #d #e #f #g #h #i #j #k #l #m #n #o #p #q #r #s #t #u #v #w #x #y #z).	od1 := Valuemap new.	self shouldnt: [letters do: [:symbol | od1 at: symbol put: symbol asString]] raise: Error.	self assert: od1 keys asArray = #(#a #b #c #d #e #f #g #h #i #j #k #l #m #n #o #p #q #r #s #t #u #v #w #x #y #z).</body><body package="Values Testing">testComparing	self assert: (Valuemap with: #foo -&gt; 'bar') = (Valuemap with: #foo -&gt; 'bar').	self deny: (Valuemap with: #foo -&gt; 'bar') == (Valuemap with: #foo -&gt; 'bar').	self deny: (Valuemap with: #foo -&gt; 'bar') = (Dictionary with: #foo -&gt; 'bar').	self deny: (Dictionary with: #foo -&gt; 'bar') = (Valuemap with: #foo -&gt; 'bar').	self assert: (Valuemap with: #foo -&gt; 'bar' with: $a -&gt; 123) = (Valuemap with: #foo -&gt; 'bar' with: $a -&gt; 123).	self deny: (Valuemap with: #foo -&gt; 'bar' with: $a -&gt; 123) = (Valuemap with: $a -&gt; 123 with: #foo -&gt; 'bar' ).	self deny: (Valuemap with: #foo -&gt; 'bar' with: $a -&gt; 123) = (Valuemap with: #foo -&gt; 123 with: $a -&gt; 'bar' ).	self deny: (Valuemap with: #foo -&gt; 'bar' with: $a -&gt; 123) = (Valuemap with: #foo -&gt; 'bar' with: $a -&gt; 1234).	self deny: (Valuemap with: #foo -&gt; 'bar' with: $a -&gt; 123) = (Valuemap with: #foo -&gt; 'bars' with: $a -&gt; 123).	self deny: (Valuemap with: #foo -&gt; 'bar' with: $a -&gt; 123) = (Valuemap with: #foo -&gt; 'bar' with: $a -&gt; 123 with: '' -&gt; 0).</body><body package="Values Testing">testDescribeAndReadBackNew	| inst |	inst := Valuemap new.	self assert: inst asDescription = (Compiler evaluate: inst asSource) asDescription</body><body package="Values Testing">testEnumeration	| od keys |	od := Valuemap new.	od add: #foo -&gt; 'bar'.	od at: #baz put: 'xxx'.	od associationsDo: [:assoc |		self assert: (assoc isKindOf: Association).		self assert: assoc key isSymbol.		self assert: assoc value isString].	self assert: od keys asArray = #(#foo #baz).	self assert: od values asArray = #('bar' 'xxx').	keys := OrderedCollection new.	od keysDo: [:k | keys add: k].	self assert: keys asArray = #(#foo #baz).</body><body package="Values Testing">testExampleSource	self assert: Valuemap example asSource = '((Valuemap new: 17)	add: #title -&gt; ''Valuemap class example with examples of all basic values'';	add: #boolean -&gt; true;	add: #character -&gt; $A;	add: #symbol -&gt; #mySymbol;	add: #string -&gt; ''with umlauts and euro: Ã¤Ã¶Ã¼Ãâ¬'';	add: #schlÃ¼ssel -&gt; nil;	add: #integer -&gt; 42;	add: #number -&gt; 3.14;	add: #date -&gt; (Date d: 27 m: 3 y: 2022);	add: #time -&gt; (Time h: 12 m: 18);	add: #timestamp -&gt; (Timestamp d: 27 m: 3 y: 2022 h: 12 m: 18);	add: #duration -&gt; (Duration nanoseconds: 300000000000);	add: #color -&gt; (ColorValue fromBytesRed: 127 green: 0 blue: 0);	add: #knownColor -&gt; ColorValue red;	add: #array -&gt; #(#one ''two'' 3);	add: #bytearray -&gt; #[1 2 3];	add: #valuemap -&gt; (Valuemap		with: #test -&gt; true		with: #two -&gt; 2		with: #none -&gt; nil);	yourself)'</body><body package="Values Testing">testIndexOf	| od |	od := Valuemap new.	self assert: od isEmpty.	self assert: (od indexOf: #foo) isZero.	od add: #foo -&gt; 'bar'.	self assert: od size = 1.	self assert: (od indexOf: #foo) = 1.	self assert: (od indexOf: #baz) isZero.	od at: #baz put: 'xxx'.	self assert: od size = 2.	self assert: (od indexOf: #baz) = 2.</body><body package="Values Testing">testIndexedAccess	| od |	od := Valuemap new.	od add: #foo -&gt; 'bar'.	self assert: od size = 1.	self assert: (od atIndex: 1) = (#foo -&gt; 'bar').	self should: [od atIndex: 0] raise: SubscriptOutOfBoundsError.	self should: [od atIndex: 2] raise: SubscriptOutOfBoundsError.	self should: [od atIndex: #key] raise: NonIntegerIndexError.	self should: [od atIndex: '1'] raise: NonIntegerIndexError.</body><body package="Values Testing">testKeyedAccess	| od |	od := Valuemap new.	od add: #foo -&gt; 'bar'.	od at: #baz put: 'xxx'.	self assert: od size = 2.	self assert: (od at: #foo) = 'bar'.	self assert: (od at: #baz) = 'xxx'.	self should: [od at: #bar] raise: NotFoundError.	self assert: (od at: #bar ifAbsent: [nil]) isNil.</body><body package="Values Testing">testReadBackAllTestInstances	(Valuemap class organization listAtCategoryNamed: (Valuemap class whichCategoryIncludesSelector: #example)) do: [:sel |		| inst readInst |		inst := Valuemap perform: sel.		self shouldnt: [readInst := Compiler evaluate: inst asSource] raise: Error.		self assert: inst asSource = readInst asSource]</body><body package="Values Testing">testRemoving	| od |	od := Valuemap new.	self assert: od isEmpty.	self should: [od removeKey: #foo] raise: NotFoundError.	self shouldnt: [od removeKey: #foo ifAbsent: nil] raise: NotFoundError.	self assert: (od removeKey: #foo ifAbsent: nil) isNil.	od add: #foo -&gt; 'bar'.	self assert: od size = 1.	self assert: od keys asArray = #(#foo).	self assert: (od removeKey: #foo) = 'bar'.	self assert: od size = 0.	self assert: od keys asArray = #().	od add: #foo -&gt; 'bar'.	od at: #baz put: 'xxx'.	self assert: od size = 2.	self assert: od keys asArray = #(#foo #baz).	self should: [od removeKey: #zzz] raise: NotFoundError.	self shouldnt: [od removeKey: #zzz ifAbsent: nil] raise: NotFoundError.	self assert: od size = 2.	self assert: od keys asArray = #(#foo #baz).	self assert: (od removeKey: #foo) = 'bar'.	self assert: od size = 1.	self assert: od keys asArray = #(#baz)</body></methods><methods><class-id>ValueTest</class-id> <category>testing</category><body package="Values Testing">testIsEmpty	self		assert: Value new isEmpty;		deny: Value new notEmpty</body><body package="Values Testing">testIsEqualValue	self		assert: (1 isEqualValue: 1);		assert: (1 isEqualValue: 1.0);		assert: (ColorValue red isEqualValue: (ColorValue fromBytesRed: 255 green: 0 blue: 0));		assert: ((Dictionary with: #a -&gt; $a with: #b -&gt; $b) isEqualValue: (Dictionary with: #b -&gt; $b with: #a -&gt; $a));		deny: ((Valuemap with: #a -&gt; $a with: #b -&gt; $b) isEqualValue: (Valuemap with: #b -&gt; $b with: #a -&gt; $a))</body></methods><methods><class-id>Testvalue</class-id> <category>accessing</category><body package="Values Testing">array	"&lt;Array&gt;"	^array ifNil: [#()]</body><body package="Values Testing">constant	"&lt;Symbol&gt;"	^constant</body><body package="Values Testing">dictionary	"&lt;Dictionary&gt;"	^dictionary ifNil: [Dictionary new beImmutable]</body><body package="Values Testing">optional	"&lt;Symbol&gt;"	^optional ifNil: [#none]</body></methods><methods><class-id>Testvalue</class-id> <category>printing</category><body package="Values Testing">printvalueWith: printer	| args |	args := OrderedCollection new.	args add: (printer constant: 'constant' value: self constant).	args add: (printer optional: 'optional' value: optional).	args add: (printer array: 'array' value: self array).	args add: (printer dictionary: 'dictionary' value: self dictionary).	^printer printvalue: self arguments: args</body></methods><methods><class-id>Testvalue</class-id> <category>marshaling</category><body package="Values Testing">passInstVars	"for OpenTalk StSt"	^#(#default #default #default #value)</body></methods><methods><class-id>Testvalue</class-id> <category>initialize-release</category><body package="Values Testing">initializeConstant: constantSymbol optional: optionalSymbol array: arrayArray dictionary: dictionaryDictionary	constant := constantSymbol.	(optionalSymbol notNil and: [	self optional ~= optionalSymbol]) ifTrue: [			optional := optionalSymbol].	(arrayArray notNil and: [	arrayArray notEmpty]) ifTrue: [			array := (Array withAll: arrayArray) beImmutable].	(dictionaryDictionary notNil and: [	dictionaryDictionary notEmpty]) ifTrue: [			dictionary := (Valuemap withAll: dictionaryDictionary) beImmutable].	self beImmutable</body></methods><methods><class-id>Testvalue class</class-id> <category>instance creation</category><body package="Values Testing">constant: constantSymbol optional: optionalSymbol array: arrayArray dictionary: dictionaryDictionary	| inst |	inst := self new.	inst		initializeConstant: constantSymbol		optional: optionalSymbol		array: arrayArray		dictionary: dictionaryDictionary.	^inst</body></methods><methods><class-id>Testvalue class</class-id> <category>instance creation optional</category><body package="Values Testing">constant: constantSymbol	| inst |	inst := self new.	inst initializeConstant: constantSymbol optional: nil array: nil dictionary: nil.	^inst</body><body package="Values Testing">constant: constantSymbol array: arrayArray	| inst |	inst := self new.	inst initializeConstant: constantSymbol optional: nil array: arrayArray dictionary: nil.	^inst</body><body package="Values Testing">constant: constantSymbol array: arrayArray dictionary: dictionaryDictionary	| inst |	inst := self new.	inst		initializeConstant: constantSymbol		optional: nil		array: arrayArray		dictionary: dictionaryDictionary.	^inst</body><body package="Values Testing">constant: constantSymbol dictionary: dictionaryDictionary	| inst |	inst := self new.	inst		initializeConstant: constantSymbol		optional: nil		array: nil		dictionary: dictionaryDictionary.	^inst</body><body package="Values Testing">constant: constantSymbol optional: optionalSymbol	| inst |	inst := self new.	inst initializeConstant: constantSymbol optional: optionalSymbol array: nil dictionary: nil.	^inst</body><body package="Values Testing">constant: constantSymbol optional: optionalSymbol array: arrayArray	| inst |	inst := self new.	inst		initializeConstant: constantSymbol		optional: optionalSymbol		array: arrayArray		dictionary: nil.	^inst</body><body package="Values Testing">constant: constantSymbol optional: optionalSymbol dictionary: dictionaryDictionary	| inst |	inst := self new.	inst		initializeConstant: constantSymbol		optional: optionalSymbol		array: nil		dictionary: dictionaryDictionary.	^inst</body></methods><methods><class-id>Testvalue class</class-id> <category>test instances</category><body package="Values Testing">example	^Testvalue		constant: #constantSymbol		optional: #optionalSymbol		array: #(1 #a $x 'name')		dictionary: (Valuemap			with: 1 -&gt; #symbol			with: #key -&gt; 'string')</body></methods><methods><class-id>ColorValueTest</class-id> <category>testing</category><body package="Values Testing">testAccessing	self		assert: ColorValue yellow yellow equals: 1.0;		assert: ColorValue cyan cyan equals: 1.0;		assert: ColorValue magenta magenta equals: 1.0</body><body package="Values Testing">testConversionToByteArray	self		assert: black asByteArray equals: #[0 0 0];		assert: white asByteArray equals: #[255 255 255]</body><body package="Values Testing">testConversionToColorValue	self		assert: black asColorValue == black;		assert: white asColorValue == white</body><body package="Values Testing">testConversionToColorValueFromColor	self		assert: black asColorValue equals: (ColorValue red: 0 green: 0 blue: 0);		assert: white asColorValue equals: (ColorValue red: 1 green: 1 blue: 1)</body><body package="Values Testing">testConversionToGrayValue	self		assert: black asGrayValue equals: 0.0;		assert: white asGrayValue equals: 1.0</body><body package="Values Testing">testNamedColors	self		assert: ColorValue namedValueNames size equals: 8;		assert: Object namedValueNames size equals: 0</body><body package="Values Testing">testNamesByValues	self assert: ColorValue namesByValues size equals: 8.	self assert: ColorValue namesByValues values asArray equals: ColorValue namedValueNames</body><body package="Values Testing">testRGBIndex	self		assert: black rgbIndex equals: 0;		assert: white rgbIndex equals: 2r111111111111111111111111</body></methods><methods><class-id>ColorValueTest</class-id> <category>running</category><body package="Values Testing">setUp	super setUp.	white := ColorValue white.	black := ColorValue black</body></methods><methods><class-id>Core.Valuemap class</class-id> <category>test instances</category><body package="Values Testing">example	"self example"	| map |	map := Valuemap new.	map at: #title put: self class name , ' example with examples of all basic values'.	map at: #boolean put: true.	map at: #character put: $A.	map at: #symbol put: #mySymbol.	map at: #string put: 'with umlauts and euro: Ã¤Ã¶Ã¼Ãâ¬'.	map at: #schlÃ¼ssel put: nil.	map at: #integer put: 42.	map at: #number put: 3.14.	map at: #date put: (Date d: 27 m: 3 y: 2022).	map at: #time put: (Time h: 12 m: 18).	map at: #timestamp put: (Timestamp d: 27 m: 3 y: 2022 h: 12 m: 18).	map at: #duration put: 5 minutes.	map at: #color put: (ColorValue fromBytesRed: 127 green: 0 blue: 0).	map at: #knownColor put: ColorValue red.	map at: #array put: #(#one 'two' 3).	map at: #bytearray put: #[1 2 3].	map		at: #valuemap		put: (Valuemap			with: #test -&gt; true			with: #two -&gt; 2			with: #none -&gt; nil).	^map</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Value</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Values</package></attributes></class><class><name>TestCase</name><environment>SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitToo</package></attributes></class></st-source>