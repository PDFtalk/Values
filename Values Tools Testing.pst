<?xml version="1.0"?><st-source><!-- Name: Values Tools TestingNotice: Comment: Tests for the source generation for Value classesPackageName: Values Tools TestingParcel: #('Values Tools Testing')Version: 3.0.4.0Date: 1:58:59 PM October 19, 2024 --><time-stamp>From VisualWorksÂ®, 9.4 of 5. Januar 2024 on 19. Oktober 2024 at 13:58:59</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><name-space><name>ValueTestingNamespace</name><environment>Smalltalk</environment><private>false</private><imports>			private Smalltalk.*			</imports><category></category><attributes><package>Values Tools Testing</package></attributes></name-space><comment><name-space-id>ValueTestingNamespace</name-space-id><body>A Namespace for testing purposes.Used for testing Values in other namespaces named Array, Dictionary and OrderedDictionary</body></comment><class><name>ScopeTest</name><environment>Smalltalk</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Values Tools Testing</package></attributes></class><comment><class-id>ScopeTest</class-id><body>Tests for the scope or visibility between classes.Values write their source with or without namespaces, depending on the scope.</body></comment><class><name>ValueGenerationTest</name><environment>Smalltalk</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Values Tools Testing</package></attributes></class><comment><class-id>ValueGenerationTest</class-id><body>Tests for the various parts of the source code generation</body></comment><class><name>Valuemap</name><environment>ValueTestingNamespace</environment><super>Value</super><private>false</private><indexed-type>none</indexed-type><inst-vars>value </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Values Tools Testing</package></attributes></class><comment><class-id>ValueTestingNamespace.Valuemap</class-id><body>redefinition of Valuemap.Used to test the correct source string for classes which shadow the internally used system classes (Array, Dictionary, Valuemap)</body></comment><class><name>Dictionary</name><environment>ValueTestingNamespace</environment><super>Value</super><private>false</private><indexed-type>none</indexed-type><inst-vars>value </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Values Tools Testing</package></attributes></class><comment><class-id>ValueTestingNamespace.Dictionary</class-id><body>redefinition of Dictionary.Used to test the correct source string for classes which shadow the internally used system classes (Array, Dictionary, OrderedDictionary)</body></comment><class><name>Array</name><environment>ValueTestingNamespace</environment><super>Value</super><private>false</private><indexed-type>none</indexed-type><inst-vars>value </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Values Tools Testing</package></attributes></class><comment><class-id>ValueTestingNamespace.Array</class-id><body>redefinition of Array.Used to test the correct source string for classes which shadow the internally used system classes (Array, Dictionary, OrderedDictionary)</body></comment><methods><class-id>ValueTestingNamespace.Valuemap class</class-id> <category>specification</category><body package="Values Tools Testing">localSpecification	&lt;map: #value&gt;</body></methods><methods><class-id>ValueTestingNamespace.Dictionary class</class-id> <category>specification</category><body package="Values Tools Testing">localSpecification	&lt;map: #value&gt;</body></methods><methods><class-id>ValueTestingNamespace.Array class</class-id> <category>specification</category><body package="Values Tools Testing">localSpecification	&lt;sequence: #value&gt;</body></methods><methods><class-id>ScopeTest</class-id> <category>Testing</category><body package="Values Tools Testing">testScope	self assert: (DictionarySpecification isInScope: UI.Dialog).	self assert: (UI.Dialog nameRelativeTo: DictionarySpecification) equals: 'Dialog'.	self assert: (DictionarySpecification isInScope: Store.Access) not.	self assert: (Store.Access nameRelativeTo: DictionarySpecification) equals: 'Store.Access'</body></methods><methods><class-id>ValueGenerationTest</class-id> <category>Testing</category><body package="Values Tools Testing">testAllOptionalParameterCombinations	| parameterCollections |	parameterCollections := ValueSpecification exampleAllOptional parameterCombinations.	self		assert: (parameterCollections collect: [:parameters |			(parameters collect: [:p | p selector]) asArray]) asArray		equals: #(#(#name #default #list #properties) #(#name #default #list) #(#name #default #properties) #(#name #default) #(#name #list #properties) #(#name #list) #(#name #properties) #(#name) #(#default #list #properties) #(#default #list) #(#default #properties) #(#default) #(#list #properties) #(#list) #(#properties))</body><body package="Values Tools Testing">testArraySpecification	self assert: ArraySpecification example selector equals: #list.	self assert: ArraySpecification example name equals: 'list'.	self assert: ArraySpecification example comment equals: 'a list of things'.	self assert: ArraySpecification example capitalizedName equals: 'List'.	self assert: ArraySpecification example type printString equals: #{Array} printString.	self assert: ArraySpecification example typeName equals: 'Array'.	self assert: ArraySpecification example argumentName equals: 'listArray'.	self		assert: (ArraySpecification example initializeExpressionFor: Testvalue)		equals: '(listArray notNil and: [	listArray notEmpty]) ifTrue: [		list := (Array withAll: listArray) beImmutable]'.	self		assert: (ArraySpecification example initializeExpressionFor: ValueTestingNamespace.Array)		equals: '(listArray notNil and: [	listArray notEmpty]) ifTrue: [		list := (Core.Array withAll: listArray) beImmutable]'.	self		assert: (ArraySpecification example sourceAccessorFor: Testvalue)		equals: 'list	"&lt;Array&gt;	a list of things"	^list ifNil: [#()]'.	self		assert: (ArraySpecification example sourceAccessorFor: ValueTestingNamespace.Array)		equals: (ArraySpecification example sourceAccessorFor: Testvalue)</body><body package="Values Tools Testing">testConstantSpecification	self assert: ConstantSpecification example name equals: 'name'.	self assert: ConstantSpecification example comment equals: 'first there were names'.	self assert: ConstantSpecification example capitalizedName equals: 'Name'.	self assert: ConstantSpecification example type printString equals: #{String} printString.	self assert: ConstantSpecification example typeName equals: 'String'.	self assert: ConstantSpecification example argumentName equals: 'nameString'.	self		assert: (ConstantSpecification example initializeExpressionFor: Testvalue)		equals: 'name := nameString'</body><body package="Values Tools Testing">testConstantSpecificationArgumentName	self assert: ArraySpecification example argumentName equals: 'listArray'.	self assert: DictionarySpecification example argumentName equals: 'propertiesDictionary'.	self assert: ConstantSpecification example argumentName equals: 'nameString'.	self assert: OptionalConstantSpecification example argumentName equals: 'defaultString'</body><body package="Values Tools Testing">testConstantSpecificationExampleString	self		assert: (ArraySpecification example exampleStringFor: Object)		equals: '#(1 #a $x ''name'')'.	self		assert: (DictionarySpecification example exampleStringFor: Object)		equals: '(Valuemap with: 1 -&gt; #symbol with: #key -&gt; ''string'')'.	self		assert: (ConstantSpecification example exampleStringFor: Object)		equals: '''a string'''.	self		assert: (OptionalConstantSpecification example exampleStringFor: Object)		equals: '''a string'''</body><body package="Values Tools Testing">testConstantSpecificationInitializeExpression	self		assert: (ArraySpecification example initializeExpressionFor: Testvalue)		equals: '(listArray notNil and: [	listArray notEmpty]) ifTrue: [		list := (Array withAll: listArray) beImmutable]'.	self		assert: (DictionarySpecification example initializeExpressionFor: Testvalue)		equals: '(propertiesDictionary notNil and: [	propertiesDictionary notEmpty]) ifTrue: [		properties := (Valuemap withAll: propertiesDictionary) beImmutable]'.	self		assert: (ConstantSpecification example initializeExpressionFor: Testvalue)		equals: 'name := nameString'.	self		assert: (OptionalConstantSpecification example initializeExpressionFor: Testvalue)		equals: '(defaultString notNil and: [	self default ~= defaultString]) ifTrue: [		default := defaultString]'</body><body package="Values Tools Testing">testConstantSpecificationName	self assert: ConstantSpecification example selector equals: #name.	self assert: OptionalConstantSpecification example selector equals: #default.	self assert: ArraySpecification example selector equals: #list.	self assert: DictionarySpecification example selector equals: #properties.	self assert: ConstantSpecification example name equals: 'name'.	self assert: OptionalConstantSpecification example name equals: 'default'.	self assert: ArraySpecification example name equals: 'list'.	self assert: DictionarySpecification example name equals: 'properties'.	self assert: ConstantSpecification example comment equals: 'first there were names'.	self assert: OptionalConstantSpecification example comment equals: 'if nothing is said'.	self assert: ArraySpecification example comment equals: 'a list of things'.	self assert: DictionarySpecification example comment equals: 'The Properties'.	self assert: ConstantSpecification example setterName equals: 'name:'.	self assert: OptionalConstantSpecification example setterName equals: 'default:'.	self assert: ArraySpecification example setterName equals: 'list:'.	self assert: DictionarySpecification example setterName equals: 'properties:'.	self assert: ConstantSpecification example capitalizedName equals: 'Name'.	self assert: OptionalConstantSpecification example capitalizedName equals: 'Default'.	self assert: ArraySpecification example capitalizedName equals: 'List'.	self assert: DictionarySpecification example capitalizedName equals: 'Properties'</body><body package="Values Tools Testing">testConstantSpecificationType	self assert: ArraySpecification example type printString equals: #{Array} printString.	self		assert: DictionarySpecification example type printString		equals: #{Dictionary} printString.	self assert: ConstantSpecification example type printString equals: #{String} printString.	self		assert: OptionalConstantSpecification example type printString		equals: #{String} printString.	self assert: ArraySpecification example typeName equals: 'Array'.	self assert: DictionarySpecification example typeName equals: 'Dictionary'.	self assert: ConstantSpecification example typeName equals: 'String'.	self assert: OptionalConstantSpecification example typeName equals: 'String'</body><body package="Values Tools Testing">testDictionarySpecification	self assert: DictionarySpecification example selector equals: #properties.	self assert: DictionarySpecification example name equals: 'properties'.	self assert: DictionarySpecification example comment equals: 'The Properties'.	self assert: DictionarySpecification example capitalizedName equals: 'Properties'.	self		assert: DictionarySpecification example type printString		equals: #{Dictionary} printString.	self assert: DictionarySpecification example typeName equals: 'Dictionary'.	self assert: DictionarySpecification example argumentName equals: 'propertiesDictionary'.	self		assert: (DictionarySpecification example initializeExpressionFor: Testvalue)		equals: '(propertiesDictionary notNil and: [	propertiesDictionary notEmpty]) ifTrue: [		properties := (Valuemap withAll: propertiesDictionary) beImmutable]'.	self		assert: (DictionarySpecification example initializeExpressionFor: ValueTestingNamespace.Array)		equals: '(propertiesDictionary notNil and: [	propertiesDictionary notEmpty]) ifTrue: [		properties := (Core.Valuemap withAll: propertiesDictionary) beImmutable]'.	self		assert: (DictionarySpecification example sourceAccessorFor: Testvalue)		equals: 'properties	"&lt;Dictionary&gt;	The Properties"	^properties ifNil: [Dictionary new beImmutable]'.	self		assert: (DictionarySpecification example sourceAccessorFor: ValueTestingNamespace.Array)		equals: 'properties	"&lt;Dictionary&gt;	The Properties"	^properties ifNil: [Core.Dictionary new beImmutable]'</body><body package="Values Tools Testing">testFullSpecification	self assert: Value specification equals: ValueSpecification new.	self		assert: (OptionalConstantSpecification specification constants collect: [:c |			c selector])		equals: #(#selector #comment #type #default)</body><body package="Values Tools Testing">testNoOptionalParameterCombinations	| parameterCollections |	parameterCollections := ValueSpecification exampleNoOptional parameterCombinations.	self		assert: (parameterCollections collect: [:parameters |			(parameters collect: [:p | p selector]) asArray]) asArray		equals: #(#(#name #default #list #properties))</body><body package="Values Tools Testing">testOptionalConstantSpecification	self assert: OptionalConstantSpecification example name equals: 'default'.	self assert: OptionalConstantSpecification example comment equals: 'if nothing is said'.	self assert: OptionalConstantSpecification example capitalizedName equals: 'Default'.	self		assert: OptionalConstantSpecification example type printString		equals: #{String} printString.	self assert: OptionalConstantSpecification example typeName equals: 'String'.	self assert: OptionalConstantSpecification example argumentName equals: 'defaultString'.	self		assert: (OptionalConstantSpecification example initializeExpressionFor: Testvalue)		equals: '(defaultString notNil and: [	self default ~= defaultString]) ifTrue: [		default := defaultString]'</body><body package="Values Tools Testing">testOptionalParameterCombinations	| parameterCollections |	parameterCollections := ValueSpecification example parameterCombinations.	self		assert: (parameterCollections collect: [:parameters |			(parameters collect: [:p | p selector]) asArray]) asArray		equals: #(#(#name #default #list #properties) #(#name #default #list) #(#name #default #properties) #(#name #default) #(#name #list #properties) #(#name #list) #(#name #properties) #(#name))</body><body package="Values Tools Testing">testOptionalParameters	| parameters |	parameters := ValueSpecification example constants asSet select: [:constant |		constant isOptional not].	self		assert: parameters asArray		equals: (Array with: (ConstantSpecification			selector: #name			comment: 'first there were names'			type: #{String}))</body><body package="Values Tools Testing">testPrintExpression	self		assert: ConstantSpecification example printExpression		equals: 'constant: ''name'' value: self name'.	self		assert: OptionalConstantSpecification example printExpression		equals: 'optional: ''default'' value: default'.	self		assert: ArraySpecification example printExpression		equals: 'array: ''list'' value: self list'.	self		assert: DictionarySpecification example printExpression		equals: 'dictionary: ''properties'' value: self properties'</body><body package="Values Tools Testing">testSource	self		assert: OptionalConstantSpecification specification sourcePrintvalueWith		equals: 'printvalueWith: printer	| args |	args := OrderedCollection new.	args add: (printer constant: ''selector'' value: self selector).	args add: (printer optional: ''comment'' value: comment).	args add: (printer constant: ''type'' value: self type).	args add: (printer optional: ''default'' value: default).	^printer printvalue: self arguments: args'</body><body package="Values Tools Testing">testSource2	self		assert: ValueSpecification specification sourcePrintvalueWith		equals: 'printvalueWith: printer	| args |	args := OrderedCollection new.	args add: (printer array: ''constants'' value: self constants).	^printer printvalue: self arguments: args'</body><body package="Values Tools Testing">testSourceConstructorWithoutOptionals	| parameters |	parameters := ValueSpecification example constants select: [:constant | constant isOptional not].	self		assert: (ValueSpecification example sourceConstructorFor: parameters)		equals: 'name: nameString	| inst |	inst := self new.	inst initializeName: nameString default: nil list: nil properties: nil.	^inst'</body><body package="Values Tools Testing">testSourceExample	self		assert: (ValueSpecification example sourceExampleFor: Object)		equals: 'example	^Object		name: ''a string''		default: ''a string''		list: #(1 #a $x ''name'')		properties: (Valuemap with: 1 -&gt; #symbol with: #key -&gt; ''string'')'</body><body package="Values Tools Testing">testSourceInitialize	self		assert: (ValueSpecification example sourceInitializerFor: Testvalue)		equals: 'initializeName: nameString default: defaultString list: listArray properties: propertiesDictionary	name := nameString.	(defaultString notNil and: [	self default ~= defaultString]) ifTrue: [		default := defaultString].	(listArray notNil and: [	listArray notEmpty]) ifTrue: [		list := (Array withAll: listArray) beImmutable].	(propertiesDictionary notNil and: [	propertiesDictionary notEmpty]) ifTrue: [		properties := (Valuemap withAll: propertiesDictionary) beImmutable].	self beImmutable'</body></methods><methods><class-id>ValueTestingNamespace.Valuemap</class-id> <category>printing</category><body package="Values Tools Testing">printvalueWith: printer	| args |	args := OrderedCollection new.	args add: (printer dictionary: 'value' value: self value).	^printer printvalue: self arguments: args</body></methods><methods><class-id>ValueTestingNamespace.Valuemap</class-id> <category>accessing</category><body package="Values Tools Testing">value	"&lt;Dictionary&gt;"	^value ifNil: [Core.Dictionary new beImmutable]</body></methods><methods><class-id>ValueTestingNamespace.Valuemap</class-id> <category>initialize-release</category><body package="Values Tools Testing">initializeValue: valueDictionary	(valueDictionary notNil and: [	valueDictionary notEmpty]) ifTrue: [			value := (Core.Valuemap withAll: valueDictionary) beImmutable].	self beImmutable</body></methods><methods><class-id>ValueTestingNamespace.Valuemap</class-id> <category>marshaling</category><body package="Values Tools Testing">passInstVars	"for OpenTalk StSt"	^#(#value)</body></methods><methods><class-id>ValueTestingNamespace.Valuemap class</class-id> <category>instance creation</category><body package="Values Tools Testing">value: valueDictionary	| inst |	inst := self new.	inst initializeValue: valueDictionary.	^inst</body></methods><methods><class-id>ValueTestingNamespace.Valuemap class</class-id> <category>test instances</category><body package="Values Tools Testing">example	^Valuemap value: (Core.Valuemap		with: 1 -&gt; #symbol		with: #key -&gt; 'string')</body></methods><methods><class-id>ValueTestingNamespace.Dictionary</class-id> <category>marshaling</category><body package="Values Tools Testing">passInstVars	"for OpenTalk StSt"	^#(#value)</body></methods><methods><class-id>ValueTestingNamespace.Dictionary</class-id> <category>printing</category><body package="Values Tools Testing">printvalueWith: printer	| args |	args := OrderedCollection new.	args add: (printer dictionary: 'value' value: self value).	^printer printvalue: self arguments: args</body></methods><methods><class-id>ValueTestingNamespace.Dictionary</class-id> <category>accessing</category><body package="Values Tools Testing">value	"&lt;Dictionary&gt;"	^value ifNil: [Core.Dictionary new beImmutable]</body></methods><methods><class-id>ValueTestingNamespace.Dictionary</class-id> <category>initialize-release</category><body package="Values Tools Testing">initializeValue: valueDictionary	(valueDictionary notNil and: [	valueDictionary notEmpty]) ifTrue: [			value := (Core.Valuemap withAll: valueDictionary) beImmutable].	self beImmutable</body></methods><methods><class-id>ValueTestingNamespace.Dictionary class</class-id> <category>instance creation</category><body package="Values Tools Testing">value: valueDictionary	| inst |	inst := self new.	inst initializeValue: valueDictionary.	^inst</body></methods><methods><class-id>ValueTestingNamespace.Dictionary class</class-id> <category>test instances</category><body package="Values Tools Testing">example	^Dictionary value: (Core.Valuemap		with: 1 -&gt; #symbol		with: #key -&gt; 'string')</body></methods><methods><class-id>ValueTestingNamespace.Array</class-id> <category>initialize-release</category><body package="Values Tools Testing">initializeValue: valueArray	(valueArray notNil and: [	valueArray notEmpty]) ifTrue: [			value := (Core.Array withAll: valueArray) beImmutable].	self beImmutable</body></methods><methods><class-id>ValueTestingNamespace.Array</class-id> <category>printing</category><body package="Values Tools Testing">printvalueWith: printer	| args |	args := OrderedCollection new.	args add: (printer array: 'value' value: self value).	^printer printvalue: self arguments: args</body></methods><methods><class-id>ValueTestingNamespace.Array</class-id> <category>accessing</category><body package="Values Tools Testing">value	"&lt;Array&gt;"	^value ifNil: [#()]</body></methods><methods><class-id>ValueTestingNamespace.Array class</class-id> <category>test instances</category><body package="Values Tools Testing">example	^Array value: #(1 #a $x 'name')</body></methods><methods><class-id>ValueTestingNamespace.Array class</class-id> <category>instance creation</category><body package="Values Tools Testing">value: valueArray	| inst |	inst := self new.	inst initializeValue: valueArray.	^inst</body></methods><methods><class-id>ValuePrinterTest</class-id> <category>Testing</category><body package="Values Tools Testing">testArrayWithValue	self		assert: (Array with: ValueSpecification example) asSource		equals: '(Array with: (ValueSpecification	constants: (Array		with: (ConstantSpecification selector: #name comment: ''first there were names'' type: #{String})		with: (OptionalConstantSpecification selector: #default comment: ''if nothing is said'' type: #{String} default: ''String new'')		with: (ArraySpecification selector: #list comment: ''a list of things'')		with: (DictionarySpecification selector: #properties comment: ''The Properties''))))'</body><body package="Values Tools Testing">testValuespecificationExample	self		assert: ValueSpecification example asSource		equals: '(ValueSpecification	constants: (Array		with: (ConstantSpecification selector: #name comment: ''first there were names'' type: #{String})		with: (OptionalConstantSpecification selector: #default comment: ''if nothing is said'' type: #{String} default: ''String new'')		with: (ArraySpecification selector: #list comment: ''a list of things'')		with: (DictionarySpecification selector: #properties comment: ''The Properties'')))'</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Value</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Values</package></attributes></class><class><name>TestCase</name><environment>SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitToo</package></attributes></class><class><name>ValuePrinterTest</name><environment>Smalltalk</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Values Testing</package></attributes></class></st-source>